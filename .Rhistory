library(shiny)
runExample("~Documents/MHP/map_r")
runApp("~Documents/MHP/map_r")
runApp("~/Documents/MHP/map_r")
install.packages("dplyr")
runApp("~/Documents/MHP/map_r")
install.packages("leaflet")
runApp("~/Documents/MHP/map_r")
runApp("~/Documents/MHP/map_r")
install.packages("DT")
runApp("~/Documents/MHP/map_r")
runApp("~/Documents/MHP/map_r")
runApp()
View(allzips)
View(cleantable)
runApp()
allsensors <- read.csv("data/forecast.csv",header = TRUE, sep = ",", dec=".")
View(allsensors)
View(cleantable)
runApp()
runApp()
View(cleantable)
View(cleantable)
View(allzips)
runApp()
runApp()
runApp()
runApp()
View(cleantable)
View(allsensors)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(allsensors)
runApp()
View(allzips)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(allzips)
runApp()
runApp()
runApp()
runApp()
runApp()
clear
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
View(allzips)
runApp()
runApp()
runApp()
runApp()
runApp()
print(max(sensordata[[sizeBy]]))
sensordata <- allsensors
sensordata <- sensordata[order(sensordata$PM10),]
print(max(sensordata[[sizeBy]]))
print(max(sensordata[["PM10"]]))
sensordata[[sizeBy]] / max(sensordata[[sizeBy]]) * 30000
sensordata[["PM10"]] / max(sensordata[["PM10"]]) * 30000
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
x = 10
x = 10.1122233
round(x,digits = 2)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(countries)
runApp()
View(countries)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(cleantable)
View(cleansensors)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
install.packages("dplyr")
runApp()
install.packages("leaflet")
runApp()
install.packages("DT")
runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
get_radius = function(zoom){
if(zoom==7) return(7)
else return (10)
}
get_radius(7)
get_radius(8)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
